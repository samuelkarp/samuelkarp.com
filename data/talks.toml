name = "Talks"

[[talk]]
title        = "Deep Dive into firecracker-containerd"
date         = "December 2, 2019 at 12:15 PM and December 3, 2019 at 4:45 PM"
conference   = "AWS re:Invent"
conf_year    = "2019"
track        = "containers"
talk_id      = "CON408"
catalog_link = "https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=98138"
abstract     = """
Last year, we released the Firecracker virtual machine monitor (VMM) built on
top of the Linux KVM subsystem, which is optimized for lightweight,
container-like “microVMs.” In this session, we dive deep into the
architecture of the firecracker-containerd project, which aims to allow
portability between standard OCI container images and the larger container
ecosystem with Firecracker microVMs. Topics covered include the standard
containerd architecture with the reference OCI runtime (runc), challenges
adapting containers into microVMs, and the firecracker-containerd suite.
"""

[[talk]]
title        = "Extending containerd"
date         = "November 19, 2019 at 4:25 PM"
conference   = "KubeCon + CloudNativeCon North America"
conf_year    = "2019"
track        = "Runtimes"
co_speaker   = "Maksym Pavlenko"
catalog_link = "https://kccncna19.sched.com/event/a62aa4ea00415ddc40e1d6a491c1524f"
speakerdeck  = "https://speakerdeck.com/samuelkarp/cloudnativecon-na-2019"
youtube      = "https://www.youtube.com/watch?v=9avPJL9Zqso"
abstract = """
containerd, a graduated CNCF project, is a widely used container runtime that
provides core functionality for Docker. containerd was designed to be small and
simple, but also very modular and extensible. This talk covers the architecture
of containerd, explains the responsibilities of each component, and dives deep
into containerd’s facility for extension. We’ll cover the individual gRPC
services that make up containerd and show how they can be extended with proxy
plugins, Go plugins, process interfaces (OCI runtimes and process-based
logging), thick client implementations, and build-your-own containerd for
compiled-in extension. These extension mechanisms can be shown with simple
examples and real-world use in the firecracker-containerd project.
"""

[[talk]]
title        = "Deep Dive into firecracker-containerd"
date         = "April 30, 2019 at 12:00 PM"
conference   = "DockerCon"
conf_year    = "2019"
track        = "open source"
talk_id      = "281969"
catalog_link = "https://dockercon19.smarteventscloud.com/connect/sessionDetail.ww?SESSION_ID=281969"
speakerdeck  = "https://speakerdeck.com/samuelkarp/deep-dive-into-firecracker-containerd-dockercon-2019"
youtube      = "https://www.youtube.com/watch?v=0wEiizErKZw"
abstract = """
Amazon Web Services recently released the Firecracker Virtual Machine Monitor
(VMM) built on top of the Linux KVM subsystem, which is optimized for
lightweight, container-like "microVMs". This session dives deep into the
architecture of the firecracker-containerd project, which aims to allow
portability between standard OCI container images and the larger container
ecosystem with Firecracker microVMs. Topics covered will include the standard
containerd architecture with the reference OCI runtime (runc), challenges
adapting containers into microVMs, and the firecracker-containerd suite.
"""
[[talk.link]]
title = "View recording on Docker.com"
icon  = "play-circle"
href  = "https://www.docker.com/dockercon/2019-videos?watch=deep-dive-into-firecracker-containerd"


[[talk]]
title        = "Deep Dive into firecracker-containerd"
date         = "April 28, 2019"
conference   = "LinuxFest Northwest"
conf_year    = "2019"
track        = "Containerization"
co_speaker   = "Noah Meyerhans"
speakerdeck  = "https://speakerdeck.com/samuelkarp/deep-dive-into-firecracker-containerd-linuxfest-northwest-2019"
youtube      = "https://www.youtube.com/watch?v=C-9XDdRU-kU"
abstract = """
Amazon Web Services recently released the Firecracker Virtual Machine Monitor
(VMM) built on top of the Linux KVM subsystem, which is optimized for
lightweight, container-like "microVMs". This session dives deep into the
architecture of the firecracker-containerd project, which aims to allow
portability between standard OCI container images and the larger container
ecosystem with Firecracker microVMs. Topics covered will include the standard
containerd architecture with the reference OCI runtime (runc), challenges
adapting containers into microVMs, and the firecracker-containerd suite.
"""

[[talk]]
title       = "Linux Container Primitives"
date        = "April 27, 2019"
conference  = "LinuxFest Northwest"
conf_year   = "2019"
track       = "Containerization"
speakerdeck = "https://speakerdeck.com/samuelkarp/linux-container-primitives-cgroups-namespaces-and-more-linuxfest-northwest-2019"
youtube     = "https://www.youtube.com/watch?v=Ueu8TuW-IOg"
abstract = """
In this session, we'll explore the different Linux primitives that are commonly
used in implementing container runtimes. We'll learn about the Linux primitives
that underlie container runtimes like Docker, including cgroups, namespaces,
and union filesystems. We'll see how Docker uses these primitives, and how the
OCI standard makes it possible to customize how your containers run. We'll also
discuss alternative container runtimes like CRI-O, rkt, and systemd-nspawn and
what makes them different. This will be an interactive session with a live demo
and open questions.
"""

[[talk]]
title       = "Linux Container Primitives and Runtimes"
date        = "November 26 and November 27, 2018"
conference  = "AWS re:Invent"
conf_year   = "2018"
track       = "containers"
talk_id     = "CON407"
slideshare  = "https://www.slideshare.net/AmazonWebServices/linux-container-primitives-and-runtimes-con407r1-aws-reinvent-2018"
speakerdeck = "https://speakerdeck.com/samuelkarp/linux-container-primitives-and-runtimes-re-invent-2018-con407"
abstract = """
In this session, we'll explore the different Linux primitives that are commonly
used in implementing container runtimes. Starting with Docker containers and
moving down through the stack, we'll cover containerd, runc, and the underlying
Linux primitives like cgroups, namespaces, and union filesystems. We'll also
discuss alternative container runtimes like CRI-O, rkt, and systemd-nspawn and
what makes them different. This will be an interactive session with a live demo
and open questions.
"""

[[talk]]
title       = "Windows Containers on Amazon ECS"
date        = "November 28, 2017"
conference  = "AWS re:Invent"
conf_year   = "2017"
track       = "containers"
talk_id     = "CON324"
speakerdeck = "https://speakerdeck.com/samuelkarp/windows-containers-on-amazon-ecs-re-invent-2017-con324"
abstract    = """
Docker containers are commonly regarded as powerful and portable runtime
environments for Linux code, but Docker also offers support for running Windows
Server applications in containers. 

In this talk, we'll discuss what containers are and why you'd use them, how they
work on Windows, and how Windows containers compare to Linux containers.
"""
